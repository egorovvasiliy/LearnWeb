1)Отключать встроенную стандартную транспиляцию TypeScript в файле проекта .csproj не надо!!!, иначе ошибки при сборке не отобразятся напрямую в MSVStudio,их видно только после сборки вебпаком
<PropertyGroup>
  <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
</PropertyGroup>
    1.1) Точки останова устанавливаются в браузере в папке скриптов WebPack
    1.2) Обязательно включать source-map в команду сборки Webpack, иначе корректной отладки не выйдет
    1.3) Обновление страницы разваливает отладку, source-map перестает работать, см. папку скриптов WebPack в браузере
    1.4) Во время отладки(после выбора скрипта F12 в браузере) файлы, скомпилленные в wwwroot/bundle/ уменьшаются в размере на величину (source-map)
    1.5) Наличие в sources браузера структуры "webpack-inernal://" означает, что в структурах "webpack://" будут оригинальные ts-скрипты, и их можно дебажить.
         В режиме debug отладка будет параллельно работать и в MSVisualStudio, иначе только в браузере.
         "webpack-inernal://" появляется не во всех случаях запуска отладки, но помогает "лишнее" сохранение рабочего ts. файла в "студии" перед запуском.
    1.6) При запуске сборки в режиме отладки cookie чистятся после завершения сессий.
2).gitignore
# сгенерированные webpack-ом файлы
wwwroot/bundle/


3) для отладки в реестре Windows запретил режим инкогнито для Chrome


4) может пригодиться
см. сборка ts...
<Target Name="AfterBuild">
    <Exec Command="npm run d" />
</Target>

или так в package.json
"-vs-binding": {
  "BeforeBuild": [
    "d"
  ]
  5) использование import,комментариев в global.d.ts сломает компилятору мозг!!!

  6) после изменений в декларируемых файлах ..d.ts нужно перезапускать команду npm webpack
  7) псевдоклассы требуют:...        &::after
  8) при добавлении стилей в jsx-разметку   style={{ color: 'darkseagreen' } придется обновить скрипт webpack
